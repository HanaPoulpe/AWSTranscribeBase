[tox]
envlist =
    # Cleanup
    coverage-clean
    # Code style/linter
    flake8
    isort
    mypy
#    py{310,311}-doc8
#    py{310,311}-docstr-coverage
    # Tests
    py{310,311}
    # Coverage
    coverage-report
#requires =
#    tox-pipenv
#    setuptools >= 57.0.0
skip_missing_interpreters = true

[testenv]
setenv =
    LOGLEVEL=DEBUG
deps =
    -rrequirements.txt
    coverage
commands = python -m coverage run -p -m unittest discover {posargs:tests}
extra = tests
#basepython = python3.10

[testenv:coverage-clean]
deps =
    coverage
skip_install = true
commands = coverage erase

[testenv:isort]
deps =
    isort
skip_install = true
commands = isort . -c

[testenv:flake8]
skip_install = true
deps =
    flake8
    flake8-bandit
    flake8-colors
    flake8-docstrings
    flake8-import-order
    flake8-commas
    flake8-bugbear
    flake8-broken-line
    flake8-per-file-ignores
    pep8-naming
    pydocstyle
    darglint
commands =
    flake8 src/ cdk/
description = Run the flake8 tool with several plugins (bandit, docstrings, import order, pep8 naming). See https://cthoyt.com/2020/04/25/how-to-code-with-me-flake8.html for more information.

[testenv:mypy]
deps = mypy
skip_install = true
commands = mypy --ignore-missing-imports src/
description = Run the mypy tool to check static typing on the project.

#[testenv:doc8]

#[testenv:docstr-coverage]

[testenv:coverage-report]
deps = coverage
skip_install = true
commands =
    coverage combine
    coverage report

####################
# Deployment tools #
####################

[testenv:bumpversion]
commands = bumpversion {posargs}
#skip_install = true
passenv = HOME
deps =
    bumpversion

[testenv:build]
skip_install = true
deps =
    wheel
    setuptools
commands =
    python setup.py -q sdist bdist_wheel

[testenv:release]
skip_install = true
deps =
    {[testenv:build]deps}
    twine >= 1.5.0
commands =
    {[testenv:build]commands}
    twine upload --skip-existing dist/*

[testenv:finish]
skip_install = true
passenv = HOME
deps =
    {[testenv:build]deps}
    {[testenv:release]deps}
    bumpversion
commands =
    bumpversion release
    {[testenv:release]commands}
    git push
    bumpversion patch
    git push
whitelist_externals =
    /usr/bin/git
